#!/usr/bin/env groovy

pipeline {
	agent {
		docker { 
			image 'gubraun/cicdbuild' 
			// Fixed hostname and mac to enable node locked license
			args '-h build-vm --mac-address 02:42:ac:11:00:03'
			registryUrl "https://registry.hub.docker.com/u/gubraun/cicdbuild/"
			registryCredentialsId "b2908016-9651-432e-bc28-0de1b23793f0"
		}
	}
	stages {
		stage('Fetch') {
			steps {
				sh 'rm -rf amazon-freertos'
				sh 'git clone https://github.com/aws/amazon-freertos'
			}
		}
		stage('Build') {
			steps {
				dir('amazon-freertos/demos/espressif/esp32_devkitc_esp_wrover_kit/make') {
					sh 'cov-configure --compiler xtensa-esp32-elf-gcc --comptype gcc --template'
					sh 'cov-build --dir idir --emit-complementary-info make'
					sh 'cov-analyze --dir idir --all --strip-path `pwd`'
					sh 'cov-commit-defects --dir idir --host 192.168.56.102 --user admin --password sigpass --stream freertos-cicd'
					sh 'cov-commit-defects --dir idir --host 192.168.56.102 --user admin --password sigpass --stream freertos-cicd --preview-report-v2 preview.json'
					sh 'ls -la idir/output'
				}
			}
		}
		stage('SAST Scan Feedback') {
			steps {
				script {
					print 'SCT utilities'
					sh 'curl -k --header "Accept: application/json" --user admin:sigpass "http://192.168.56.102:9090/api/viewContents/issues/v1/Outstanding%20Security%20Risks?projectId=Amazon%20FreeRTOS" -o output.json'
				}
			}
		}
		stage('Test') {
			steps {
				sh 'echo No tests.'
			}
		}
	}
}
