#!/usr/bin/env groovy

pipeline {
	agent any

	environment {
		COV_HOST = '192.168.56.102'
		COV_PORT = '8080'
		COV_USER = 'admin'
		COV_PASS = 'sigpass'
		COV_DIR  = '/opt/cov-analysis-linux64-2018.06'
		BLACKDUCK_USER = 'gunnar'
		BLACKDUCK_PASS = 's9=2S@Tn'
	}
	stages {
		stage('Fetch') {
			steps {
				sh 'pwd'
				sh 'rm -rf amazon-freertos'
				sh 'git clone https://github.com/aws/amazon-freertos'
				stash includes: '**/**', name 'amazon-freertos'
			}
		}
		stage('Build-Time SAST') {
			agent {
				docker { 
					image 'gubraun/cicdbuild' 
					// Fixed hostname and mac to enable node locked license
					args '-h build-vm --mac-address 02:42:ac:11:00:03'
					registryUrl "https://registry.hub.docker.com/u/gubraun/cicdbuild/"
					registryCredentialsId "b2908016-9651-432e-bc28-0de1b23793f0"
				}
			}
			steps {
				dir('amazon-freertos/demos/espressif/esp32_devkitc_esp_wrover_kit/make') {
					sh 'pwd'
					sh 'cov-configure --compiler xtensa-esp32-elf-gcc --comptype gcc --template'
					sh 'cov-build --dir idir --emit-complementary-info make'
					sh 'cov-analyze --dir idir --all --strip-path `pwd`'
					sh 'cov-analyze --dir idir --disable-default --coding-standard-config ${COV_DIR}/config/coding-standards/misrac2012/misrac2012-mandatory-only.config -tp "file(\\"\\/tasks.c|\\/queue.c|\\/list.c\\")" --output-tag "-misrac2012" --strip-path `pwd`'
					sh 'cov-commit-defects --dir idir --host ${COV_HOST} --port ${COV_PORT} --user ${COV_USER} --password ${COV_PASS} --stream freertos-cicd'
					sh 'cov-commit-defects --dir idir --host ${COV_HOST} --port ${COV_PORT} --user ${COV_USER} --password ${COV_PASS} --output-tag "-misrac2012" --stream freertos-cicd-misrac2012'
					sh 'cov-commit-defects --dir idir --host ${COV_HOST} --port ${COV_PORT} --user ${COV_USER} --password ${COV_PASS} --stream freertos-cicd --preview-report-v2 preview.json'
					sh 'ls -la idir/output'
					sh 'ls -la idir/output-misrac2012'
				}
			}
		}
		stage('SAST Scan Feedback') {
			steps {
				script {
					print 'SCT utilities'
					sh 'curl -k --header "Accept: application/json" --user admin:sigpass "http://${COV_HOST}:${COV_PORT}/api/viewContents/issues/v1/Outstanding%20Security%20Risks?projectId=Amazon%20FreeRTOS" -o output.json'
					//sh 'java -jar $(pwd)/SCT/Adapters/coverity-0.0.1.jar --previewFile $(pwd)/preview.json --curlOutputFile $(pwd)/output.json'
					//sh 'java -jar $(pwd)/SCT/JiraBugTrack/JiraBugTracker.jar  --file $(pwd)/SCT-Findings-Coverity.xml --url ${JIRA_URL} --user ${JIRA_USER} --password ${JIRA_PASS} --issueType Bug --project CICDC'
					//archiveArtifacts '**/SCT-Findings-Coverity.xml'
					//sh 'java -jar $(pwd)/SCT/BuildBreaker/buildbreaker.jar --resultFile SCT-Findings-Coverity.xml --criteriaFile $(pwd)/SCT/BuildBreaker/criterias/criteria_coverity_nobreak.xml'
				}
			}
		}
		stage('Build-Time SCA') {
			agent {
				docker {
					image 'openjdk:8-re'
				}
			}
			steps {
				dir('amazon-freertos') {
					echo 'Running Black Duck SCA'
					sh 'ls $(pwd)'
					sh 'ls $(WORKSPACE)'
					//sh '''#!/bin/bash
					//bash <(curl -s https://blackducksoftware.github.io/hub-detect/hub-detect.sh) --blackduck.hub.url="https://blackduck-integration.cigital.com/" --blackduck.hub.username=${BLACKDUCK_USER} --blackduck.hub.password=${BLACKDUCK_PASSWORD} --blackduck.hub.trust.cert=true --blackduck.hub.auto.import.cert=true > $WORKSPACE/log.txt''' 
					//sh 'java -jar $(pwd)/SCT/Adapters/blackduck-api.jar blackduck-integration.cigital.com ${BLACKDUCK_USER} ${BLACKDUCK_PASSWORD} $WORKSPACE/log.txt $WORKSPACE/BlackDuck-Report.json'
					sh '''#!/bin/bash
					bash <(curl -s https://blackducksoftware.github.io/hub-detect/hub-detect.sh) --blackduck.hub.url="https://hubsig.blackducksoftware.com/" --blackduck.hub.username=${BLACKDUCK_USER} --blackduck.hub.password=${BLACKDUCK_PASSWORD} > $WORKSPACE/log.txt''' 
					//sh 'java -jar $(pwd)/SCT/Adapters/blackduck-api.jar blackduck-integration.cigital.com ${BLACKDUCK_USER} ${BLACKDUCK_PASSWORD} $WORKSPACE/log.txt $WORKSPACE/BlackDuck-Report.json'
					//archiveArtifacts '**/BlackDuck-Report.json'
				}
			}
		}
		stage('SCA Scan Feedback') {
			steps {
				script {
					sh 'ls -la $(pwd)'
					//sh 'java -jar $(pwd)/SCT/Adapters/blackduck.jar --reportFile $WORKSPACE/BlackDuck-Report.json'
					//sh 'java -jar $(pwd)/SCT/JiraBugTrack/JiraBugTracker.jar  --file $(pwd)/SCT-Findings-Coverity.xml --url ${JIRA_URL} --user ${JIRA_USER} --password ${JIRA_PASS} --issueType Bug --project CICDC'
					//sh 'java -jar $(pwd)/SCT/BuildBreaker/buildbreaker-sca.jar --resultFile SCT-Findings-Blackduck.xml --criteriaFile $(pwd)/SCT/BuildBreaker/criterias/criteria_blackduck_nobreak.xml'
				}
			}
		}
		stage('Test') {
			steps {
				sh 'echo No tests.'
			}
		}
	}
}
